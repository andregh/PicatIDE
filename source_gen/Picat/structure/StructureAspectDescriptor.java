package Picat.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b, conceptFqName)) {
      case 0:
        return new ConceptDescriptorBuilder("Picat.structure.Atom").super_("Picat.structure.Term").parents("Picat.structure.Term").create();
      case 1:
        return new ConceptDescriptorBuilder("Picat.structure.CommentBlock").super_("Picat.structure.PicatConcept").parents("Picat.structure.PicatConcept").properties("text").create();
      case 2:
        return new ConceptDescriptorBuilder("Picat.structure.CommentLine").super_("Picat.structure.PicatConcept").parents("Picat.structure.PicatConcept").properties("text").create();
      case 3:
        return new ConceptDescriptorBuilder("Picat.structure.FunctionDef").super_("Picat.structure.PicatConcept").parents("Picat.structure.PicatConcept").children(new String[]{"functionDirective", "functionRules"}, new boolean[]{true, true}).create();
      case 4:
        return new ConceptDescriptorBuilder("Picat.structure.FunctionDirective").super_("Picat.structure.PicatConcept").parents("Picat.structure.PicatConcept").abstract_().create();
      case 5:
        return new ConceptDescriptorBuilder("Picat.structure.FunctionDirectivePrive").super_("Picat.structure.FunctionDirective").parents("Picat.structure.FunctionDirective").create();
      case 6:
        return new ConceptDescriptorBuilder("Picat.structure.FunctionDirectiveTable").super_("Picat.structure.FunctionDirective").parents("Picat.structure.FunctionDirective").create();
      case 7:
        return new ConceptDescriptorBuilder("Picat.structure.FunctionFact").super_("Picat.structure.FunctionRuleOrFact").parents("Picat.structure.FunctionRuleOrFact").create();
      case 8:
        return new ConceptDescriptorBuilder("Picat.structure.FunctionRule").super_("Picat.structure.FunctionRuleOrFact").parents("Picat.structure.FunctionRuleOrFact").create();
      case 9:
        return new ConceptDescriptorBuilder("Picat.structure.FunctionRuleOrFact").super_("Picat.structure.PicatConcept").parents("Picat.structure.PicatConcept").abstract_().create();
      case 10:
        return new ConceptDescriptorBuilder("Picat.structure.Head").super_("Picat.structure.PicatConcept").parents("Picat.structure.PicatConcept").children(new String[]{"name", "params"}, new boolean[]{false, true}).create();
      case 11:
        return new ConceptDescriptorBuilder("Picat.structure.ImportDecl").super_("Picat.structure.PicatConcept").parents("Picat.structure.PicatConcept").children(new String[]{"moduleImports"}, new boolean[]{true}).create();
      case 12:
        return new ConceptDescriptorBuilder("Picat.structure.ImportFunctionItem").super_("Picat.structure.ImportModuleItem").parents("Picat.structure.ImportModuleItem").properties("arity").children(new String[]{"function"}, new boolean[]{false}).create();
      case 13:
        return new ConceptDescriptorBuilder("Picat.structure.ImportModuleItem").super_("Picat.structure.PicatConcept").parents("Picat.structure.PicatConcept").references("module").create();
      case 14:
        return new ConceptDescriptorBuilder("Picat.structure.ModuleDecl").super_("Picat.structure.PicatConcept").parents("Picat.structure.PicatConcept").children(new String[]{"name"}, new boolean[]{false}).alias("Module", "").create();
      case 15:
        return new ConceptDescriptorBuilder("Picat.structure.Operator").super_("Picat.structure.PicatConcept").parents("Picat.structure.PicatConcept").properties("val").create();
      case 16:
        return new ConceptDescriptorBuilder("Picat.structure.PicatConcept").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
      case 17:
        return new ConceptDescriptorBuilder("Picat.structure.Root").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"concepts"}, new boolean[]{true}).create();
      case 18:
        return new ConceptDescriptorBuilder("Picat.structure.Term").super_("Picat.structure.PicatConcept").parents("Picat.structure.PicatConcept").properties("val").create();
      case 19:
        return new ConceptDescriptorBuilder("Picat.structure.Variable").super_("Picat.structure.Term").parents("Picat.structure.Term").abstract_().create();
      case 20:
        return new ConceptDescriptorBuilder("Picat.structure.VariableAnonymous").super_("Picat.structure.Variable").parents("Picat.structure.Variable").create();
      case 21:
        return new ConceptDescriptorBuilder("Picat.structure.VariableNamed").super_("Picat.structure.Term").parents("Picat.structure.Term").create();
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }

  private static String[] stringSwitchCases_1htk8d_a0a0b = new String[]{"Picat.structure.Atom", "Picat.structure.CommentBlock", "Picat.structure.CommentLine", "Picat.structure.FunctionDef", "Picat.structure.FunctionDirective", "Picat.structure.FunctionDirectivePrive", "Picat.structure.FunctionDirectiveTable", "Picat.structure.FunctionFact", "Picat.structure.FunctionRule", "Picat.structure.FunctionRuleOrFact", "Picat.structure.Head", "Picat.structure.ImportDecl", "Picat.structure.ImportFunctionItem", "Picat.structure.ImportModuleItem", "Picat.structure.ModuleDecl", "Picat.structure.Operator", "Picat.structure.PicatConcept", "Picat.structure.Root", "Picat.structure.Term", "Picat.structure.Variable", "Picat.structure.VariableAnonymous", "Picat.structure.VariableNamed"};
}
