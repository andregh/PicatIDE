package Picat.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {


  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new CommentBlock_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new CommentLine_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new FunctionDef_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new FunctionDirectivePrive_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new FunctionDirectiveTable_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Head_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new ImportDecl_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new ImportFunctionItem_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new ImportModuleItem_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new ModuleDecl_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Operator_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Root_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Term_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new VariableAnonymous_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0c, descriptor.getConceptFqName())) {
      case 0:
        if ("Picat.editor.ImportModule".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new ImportModule());
        }
        break;
      case 1:
        if ("Picat.editor.Eor".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new Eor());
        }
        break;
      case 2:
        if ("Picat.editor.TermEditor".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new TermEditor());
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }



  private static String[] stringSwitchCases_xbvbvu_a0a0b = new String[]{"Picat.structure.CommentBlock", "Picat.structure.CommentLine", "Picat.structure.FunctionDef", "Picat.structure.FunctionDirectivePrive", "Picat.structure.FunctionDirectiveTable", "Picat.structure.Head", "Picat.structure.ImportDecl", "Picat.structure.ImportFunctionItem", "Picat.structure.ImportModuleItem", "Picat.structure.ModuleDecl", "Picat.structure.Operator", "Picat.structure.Root", "Picat.structure.Term", "Picat.structure.VariableAnonymous"};
  private static String[] stringSwitchCases_xbvbvu_a0a0c = new String[]{"Picat.structure.ImportModuleItem", "Picat.structure.PicatConcept", "Picat.structure.Term"};
}
